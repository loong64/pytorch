name: custom build

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'Build version'
        required: true
        default: ''

jobs:
  custom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ['torch']
        platform: ['cp39-manylinux_loongarch64', 'cp310-manylinux_loongarch64', 'cp311-manylinux_loongarch64', 'cp312-manylinux_loongarch64', 'cp313-manylinux_loongarch64']
    steps:
      - name: Checkout Code
        run: |
          app_version=${{ github.event.inputs.app_version }}
          wget -qO - https://github.com/pytorch/pytorch/releases/download/${app_version}/pytorch-${app_version}.tar.gz | tar xz --strip-components=1

          if [ ! -f ".ci/docker/ci_commit_pins/nccl-cu12.txt" ]; then
            mkdir -p .ci/docker/ci_commit_pins
            wget -qO .ci/docker/ci_commit_pins/nccl-cu12.txt https://github.com/pytorch/pytorch/raw/refs/tags/${app_version}/.ci/docker/ci_commit_pins/nccl-cu12.txt || true
          fi

          cd third_party/sleef
          wget -qO - https://github.com/loong64/pytorch/raw/refs/heads/main/sleef/sleef_loong64.patch | patch -p1

          cd ../cpuinfo
          wget -qO - https://github.com/loong64/pytorch/raw/refs/heads/main/cpuinfo/cpuinfo_loong64.patch | patch -p1

          echo "PYTORCH_BUILD_NUMBER=1" >> $GITHUB_ENV
          echo "PYTORCH_BUILD_VERSION=${app_version/v/}" >> $GITHUB_ENV

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Restore Cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            /home/runner/data/cache
          key: ${{ matrix.package }}-${{ matrix.platform }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ matrix.package }}-${{ matrix.platform }}-

      - name: Setup Cache
        run: |
          sudo mkdir -p /home/runner/data/cache/.cache
          sudo chown -R root:docker /home/runner/data/cache

      - name: Build wheels
        uses: loong64/cibuildwheel@v2.23.2
        env:
          CIBW_MANYLINUX_LOONGARCH64_IMAGE: "ghcr.io/loong64/manylinuxloongarch64-builder:cpu-loongarch64"
          CIBW_ARCHS: loongarch64
          CIBW_BUILD: ${{ matrix.platform }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y ccache libomp-devel
          CIBW_BEFORE_BUILD: >
            pip install https://github.com/loong64/auditwheel/releases/download/6.2.0/auditwheel-6.2.0-py3-none-any.whl
          CIBW_ENVIRONMENT_LINUX: >
            BUILD_TEST=0
            PYTORCH_BUILD_NUMBER=${{ env.PYTORCH_BUILD_NUMBER }}
            PYTORCH_BUILD_VERSION=${{ env.PYTORCH_BUILD_VERSION }}
            PIP_EXTRA_INDEX_URL="https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple"
            USE_CCACHE=1
            PATH="/usr/lib64/ccache:$HOME/.cargo/bin:$PATH"
            CCACHE_DIR="/host/home/runner/data/cache/ccache"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
            for pkg in {dest_dir}/*.whl; do 
              if [[ ! -e $pkg ]]; then
                continue
              fi
              abs_pkg=$(realpath $pkg)
              python /opt/embed_library.py ${abs_pkg}
            done
          CIBW_TEST_SKIP: "*"

      - name: Cache permissions
        if: always()
        run: |
          sudo chown -R runner:docker /home/runner/data/cache

      - name: Save Cache
        if: always()
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: /home/runner/data/cache
          key: ${{ matrix.package }}-${{ matrix.platform }}-${{ hashFiles('pyproject.toml') }}

      - name: Upload wheels
        run: |
          pip install twine==6.0.1
          for file in wheelhouse/*.whl; do
            twine upload --repository-url https://gitlab.com/api/v4/projects/65746188/packages/pypi $file || true
          done
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GL_TOKEN }}